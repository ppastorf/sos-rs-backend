name: Create and publish a Docker image

# secrets necessarios:
  # DEV_SSH_HOST
  # DEV_SSH_KEY
  # PROD_SSH_HOST
  # PROD_SSH_KEY

on:
  push:
    branches: 
    - develop
    - main

env:
  IMAGE_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_TAG: ${{ github.sha }}
  COMPOSE_FILE: ~/sos-rs-backend/docker-compose.yml
  DEV_SSH_USER: root
  PROD_SSH_USER: root

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    outputs:
      container_image: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.5.0
        with:
          images: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags:
            type=raw,value={{branch}}-{{sha}}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5.3.0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-dev:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    permissions:
      packages: read
    needs: [build]
    env:
      NEW_IMAGE: ${{ needs.build.outputs.container_image }}
    steps:
      - name: SSH Client Install
        run: sudo apt-get install -y openssh-client

      - name: SSH Config Key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEV_SSH_KEY }}

      - name: Update image, docker rollout via SSH
        run: |
          ssh -o StrictHostKeyChecking=no ${{ env.DEV_SSH_USER }}@${{ secrets.DEV_SSH_HOST }} <<EOF
            sed -i 's|image: "${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:\(.*\)"|image: "${{ env.NEW_IMAGE }}"|g' ${{ env.COMPOSE_FILE }}
            docker rollout -f ${{ env.COMPOSE_FILE }} sos-rs-api
            docker compose -f ${{ env.COMPOSE_FILE }} exec nginx bash -c "nginx -s reload"
          EOF

  deploy-prod:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      packages: read
    needs: [build]
    steps:
      - name: SSH Client Install
        run: sudo apt-get install -y openssh-client

      - name: SSH Config Key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.PROD_SSH_KEY }}

      - name: Update image, docker rollout via SSH
        run: |
          ssh -o StrictHostKeyChecking=no ${{ env.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }} <<EOF
            sed -i 's|image: "${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:\(.*\)"|image: "${{ env.NEW_IMAGE }}"|g' ${{ env.COMPOSE_FILE }}
            docker rollout -f ${{ env.COMPOSE_FILE }} sos-rs-api
            docker compose -f ${{ env.COMPOSE_FILE }} exec nginx bash -c "nginx -s reload"
          EOF
