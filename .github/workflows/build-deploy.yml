name: Create and publish a Docker image

# secrets necessarios:
  # DEV_AWS_ACCESS_KEY_ID
  # DEV_AWS_SECRET_ACCESS_KEY
  # PROD_AWS_ACCESS_KEY_ID
  # PROD_AWS_SECRET_ACCESS_KEY

on:
  push:
    branches: 
    - develop
    - main

env:
  IMAGE_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_TAG: ${{ github.sha }}

  DEV_BRANCH: develop
  DEV_AWS_REGION: sa-east-1
  DEV_ECS_CLUSTER: sos-rs-freetier-ec2_cluster
  DEV_ECS_SERVICE: sos-rs-freetier-backend
  DEV_ECS_CONTAINER_NAME: server
  DEV_ECS_TASK_DEFINITION: sos-rs-freetier-backend

  PROD_AWS_REGION: sa-east-1
  PROD_BRANCH: main
  PROD_REGION: sa-east-1
  PROD_ECS_CLUSTER: sos-rs-freetier-ec2_cluster
  PROD_ECS_SERVICE: sos-rs-freetier-backend
  PROD_ECS_CONTAINER_NAME: server
  PROD_ECS_TASK_DEFINITION: sos-rs-freetier-backend

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.5.0
        with:
          images: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags:
            type=raw,value={{branch}}-{{sha}}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5.3.0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  deploy-dev:
    if: github.ref == 'refs/heads/develop'

    runs-on: ubuntu-latest
    permissions:
      packages: read
    needs: [build]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.DEV_AWS_REGION }}

      - name: Fetch task definition
        id: fetch-task-definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.DEV_ECS_TASK_DEFINITION }} --query taskDefinition > task-definition.json

      - name: Update container image in task definition
        id: update-image
        uses: aws-actions/amazon-ecs-render-task-definition@v1.3.0
        with:
          task-definition: task-definition.json
          container-name: ${{ env.DEV_ECS_CONTAINER_NAME }}
          image: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1.5.0
        with:
          task-definition: ${{ steps.update-image.outputs.task-definition }}
          service: ${{ env.DEV_ECS_SERVICE }}
          cluster: ${{ env.DEV_ECS_CLUSTER }}
          wait-for-service-stability: true
          force-new-deployment: true

  deploy-prod:
    if: github.ref == 'refs/heads/main'

    runs-on: ubuntu-latest
    permissions:
      packages: read
    needs: [build]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.PROD_AWS_REGION }}

      - name: Fetch task definition
        id: fetch-task-definition
        run: DEV|
          aws ecs describe-task-definition --task-definition ${{ env.PROD_ECS_TASK_DEFINITION }} --query taskDefinition > task-definition.json

      - name: Update container image in task definition
        id: update-image
        uses: aws-actions/amazon-ecs-render-task-definition@v1.3.0
        with:
          task-definition: task-definition.json
          container-name: ${{ env.PROD_ECS_CONTAINER_NAME }}
          image: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1.5.0
        with:
          task-definition: ${{ steps.update-image.outputs.task-definition }}
          service: ${{ env.PROD_ECS_SERVICE }}
          cluster: ${{ env.PROD_ECS_CLUSTER }}
          wait-for-service-stability: false
          force-new-deployment: true

