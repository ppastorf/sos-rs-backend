name: Create and publish a Docker image

on:
  push:
    branches: 
    - develop
    - main

env:
  IMAGE_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_TAG: ${{ github.sha }}
  PORT: 4000

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    outputs:
      container_image: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.5.0
        with:
          images: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags:
            type=raw,value={{branch}}-{{sha}}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5.3.0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  deploy-dev:
    if: github.ref == 'refs/heads/develop'

    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4

      - name: SSH Client
        run: sudo apt-get install -y openssh-client

      - name: SSH Config Key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_DIG_OC }}

      - name: Pull and run the Docker image
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.DEV_DROPLET_IP }} << 'EOF'
            docker login ${{ env.IMAGE_REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            docker pull ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            docker exec nginx_proxy /bin/sh ./ROUTE_UP.sh sos-rs-api-${{ env.IMAGE_TAG }}:${{ env.PORT }}
            RUNNING=$(docker ps -q)
            docker run -d --name sos-rs-api-${{ env.IMAGE_TAG }} --restart always --network sos-rs-network -v .:/usr/app -w /usr/app -e DATABASE_URL={{ secrets.DATABASE_URL_PRD }} -e PORT=${{ env.PORT }} --tty node:18.18-alpine sh -c "npm install && npx prisma generate && npx prisma migrate dev && npm run start:dev -- --preserveWatchOutput"
            docker exec nginx_proxy nginx -s reload
            sleep 10
            docker stop $RUNNING || true
            docker rm $RUNNING || true
          EOF

  deploy-prod:
    if: github.ref == 'refs/heads/main'

    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4

      - name: SSH Client Install
        run: sudo apt-get install -y openssh-client

      - name: SSH Config Key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_DIG_OC }}

      - name: Pull and run the Docker image
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.PROD_DROPLET_IP }} << 'EOF'
            docker login ${{ env.IMAGE_REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            docker pull ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            docker exec nginx_proxy /bin/sh ./ROUTE_UP.sh sos-rs-api-${{ env.IMAGE_TAG }}:${{ env.PORT }}
            RUNNING=$(docker ps -q)
            docker run -d --name sos-rs-api-${{ env.IMAGE_TAG }} --restart always --network sos-rs-network -v .:/usr/app -w /usr/app -e DATABASE_URL={{ secrets.DATABASE_URL_PRD }} -e PORT=${{ env.PORT }} --tty node:18.18-alpine sh -c "npx prisma generate && npx prisma migrate deploy && npm run build && npm run start:prod"
            docker exec nginx_proxy nginx -s reload
            sleep 10
            docker stop $RUNNING || true
            docker rm $RUNNING || true
          EOF